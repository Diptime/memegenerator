{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","meme","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","class","id","type","placeholder","onChange","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAceA,MAZf,WACI,OACI,mCACI,qBACIC,IAAI,iEACJC,IAAI,aAER,mD,0CC+DGC,E,kDArEX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,KAAM,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,qDAYd,WAAqB,IAAD,OAChBE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAQE,EAAUF,EAASG,KAAnBD,MACR,EAAKE,SAAS,CAAEV,KAAMQ,S,0BAIlC,SAAaG,GACT,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdC,KAAKL,SAAL,eAAiBG,EAAOC,M,0BAG5B,SAAaH,GACTA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,KAAKqB,QACrDC,EAAcP,KAAKnB,MAAMI,KAAKiB,GAASM,IAC7CR,KAAKL,SAAS,CAAEX,UAAWuB,M,oBAG/B,WACI,OACI,gCACI,uBAAME,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACA,qBAAKuB,MAAM,mBAAX,SACI,uBAAOF,UAAU,eAAeG,GAAG,4BAC/BC,KAAK,OACLf,KAAK,UACLgB,YAAY,WACZf,MAAOC,KAAKnB,MAAMC,QAClBiC,SAAUf,KAAKd,iBAGnB,qBAAKyB,MAAM,mBAAX,SACA,uBAAOF,UAAU,eAAeG,GAAG,4BAC/BC,KAAK,OACLf,KAAK,aACLgB,YAAY,cACZf,MAAOC,KAAKnB,MAAME,WAClBgC,SAAUf,KAAKd,iBAKnB,wBAAQuB,UAAU,iBAAlB,yBAEJ,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAY/B,IAAKsB,KAAKnB,MAAMG,UAAWL,IAAI,KAC1D,oBAAI8B,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GA/D3BiC,IAAMC,WCWnBC,MAVf,WACE,OAEI,gCACM,cAAC,EAAD,IACA,cAAC,EAAD,QCIGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3c36f4c9.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img \r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nclass MemeGenerator extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            meme: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                this.setState({ meme: memes })\r\n            })\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.meme.length)\r\n        const randMemeImg = this.state.meme[randNum].url\r\n        this.setState({ randomImg: randMemeImg })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                <div class=\"input-group mb-3\">\r\n                    <input className=\"form-control\" id=\"inputGroup-sizing-default\"\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    </div>\r\n                    <div class=\"input-group mb-3\">\r\n                    <input className=\"form-control\" id=\"inputGroup-sizing-default\"\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    </div>\r\n                   \r\n\r\n                    <button className=\"btn btn-danger\">Generate</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img className=\"img-fluid\" src={this.state.randomImg} alt=\"\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator\r\n\r\n","import './App.css';\nimport Header from \"./Header\"\nimport MemeGenerator from \"./MemeGenerator\"\nfunction App() {\n  return (\n    \n      <div>\n            <Header />\n            <MemeGenerator />\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}